%判断是否符合资源制约，符合则返回1，不符合返回0
function y=nkuresource(m)
n=nkudecode(m);%解码
a=[0 0 1];%定义基本基因
b=[0 1 0];
c=[0 1 1];
d=[1 0 0];
e=[1 0 1];
ra=[2 0 2 1 0 ; 0 1 0 2 5 ; 1 0 2 0 0 ; 0 0 0 3 5 ; 0 2 0 0 2 ];%输入资源矩阵
rb=[0 2 1 0 0 ; 2 0 2 0 0 ; 1 0 0 2 5 ; 0 1 0 0 2 ; 0 0 0 3 0 ];
rc=[1 0 0 0 0 ; 2 2 0 0 0 ; 0 0 2 3 0 ;  0 0 0 1 4 ; 1 0 0 1 3 ];
rd=[0 0 0 1 2 ; 2 3 0 0 0 ; 1 0 2 0 0 ; 0 2 0 3 0 ;0 3 0 0 6 ];
re=[0 1 0 0 2 ; 0 0 0 4 0 ; 0 0 0 0 3 ; 2 0 3 1 0 ;1 3 0 0 0 ];
ra=ra';rb=rb';rc=rc';rd=rd';re=re';
z=zeros(5,1);%初始化消耗矩阵
limit=[3 4 3 4 6];%输入资源总量矩阵
limit=limit';
for i=1:5%对于每个组件而言
    if n(i,:)==a%判断加工该组件的生产线
        z=z+ra(:,i);%消耗量加上本次加工的消耗
    end
    if n(i,:)==b
        z=z+rb(:,i);
    end
    if n(i,:)==c
        z=z+rc(:,i);
    end
    if n(i,:)==d
        z=z+rd(:,i);
    end
    if n(i,:)==e
        z=z+re(:,i);
    end
end
judge=limit-z;%判断矩阵为总量矩阵减消耗矩阵
if find(judge<0)%若有资源不足
    y=0;        %返回0
else        
    y=1;        %反之，返回1
end
 